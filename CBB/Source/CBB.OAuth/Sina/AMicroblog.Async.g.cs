using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Text;
using CBB.OAuth.Sina.Common;
using CBB.OAuth.Sina.DataContract;
using CBB.OAuth.Sina.HttpRequests;

namespace CBB.OAuth.Sina
{
    // Do not modify. This file is generated by AsyncGen.
    public static partial class AMicroblog
    {
        #region Async Methods

        /// <summary>
        /// The async implementation of <see cref="VerifyCredential"/>
        /// </summary>
        public static void VerifyCredentialAsync(AsyncCallback<UserInfo> callback)
        {
            var requester = new OAuthHttpGet(APIUri.VerifyCredential);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="EndSession"/>
        /// </summary>
        public static void EndSessionAsync(AsyncCallback<UserInfo> callback)
        {
            var requester = new OAuthHttpGet(APIUri.EndSession);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="UpdateProfileImage"/>
        /// </summary>
        public static void UpdateProfileImageAsync(AsyncCallback<UserInfo> callback, string imageFileLocation)
        {
            // Validates arguments
            ValidateArgument(imageFileLocation, "imageFileLocation");
            FileInfo picInfo = new FileInfo(imageFileLocation);
            if (picInfo.Length > 700 * 1024) // 700KB limit
            {
                throw new AMicroblogException(LocalErrorCode.ArgumentInvalid, "Profile imgae file too large to upload.");
            }
            var requester = new OAuthMultiPartHttpPost(APIUri.UpdateProfileImage);
            requester.PartFields.Add(new MultiPartField() { Name = "image", FilePath = imageFileLocation });            
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="UpdateProfile"/>
        /// </summary>
        public static void UpdateProfileAsync(AsyncCallback<UserInfo> callback, UpdateProfileInfo updateProfileInfo)
        {
            ValidateArgument(updateProfileInfo, "updateProfileInfo");
            var requester = new OAuthHttpPost(APIUri.UpdateProfileImage);
            if(!string.IsNullOrEmpty(updateProfileInfo.ScreenName))
                requester.Params.Add("name", updateProfileInfo.ScreenName);
            if (!string.IsNullOrEmpty(updateProfileInfo.Gender))
                requester.Params.Add("gender", updateProfileInfo.Gender);
            if (!string.IsNullOrEmpty(updateProfileInfo.Description))
                requester.Params.Add("description", updateProfileInfo.Description);
            if (updateProfileInfo.Province.HasValue)
                requester.Params.Add("province", updateProfileInfo.Province.Value.ToString(InvariantCulture));
            if (updateProfileInfo.City.HasValue)
                requester.Params.Add("city", updateProfileInfo.City.Value.ToString(InvariantCulture));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetPrivacy"/>
        /// </summary>
        public static void GetPrivacyAsync(AsyncCallback<PrivacyInfo> callback)
        {
            var requester = new OAuthHttpGet(APIUri.GetPrivacy);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="UpdatePrivacy"/>
        /// </summary>
        public static void UpdatePrivacyAsync(VoidAsyncCallback callback, int? commentPrivacy = null, int? messagePrivacy = null, int? realNamePrivacy = null, int? geoPrivacy = null, int? badgePrivacy = null)
        {
            var requester = new OAuthHttpPost(APIUri.UpdatePrivacy);
            if (commentPrivacy.HasValue)
                requester.Params.Add(new ParamPair("comment", commentPrivacy.Value.ToString(InvariantCulture)));
            if (messagePrivacy.HasValue)
                requester.Params.Add(new ParamPair("message", messagePrivacy.Value.ToString(InvariantCulture)));
            if (realNamePrivacy.HasValue)
                requester.Params.Add(new ParamPair("realname", realNamePrivacy.Value.ToString(InvariantCulture)));
            if (geoPrivacy.HasValue)
                requester.Params.Add(new ParamPair("geo", geoPrivacy.Value.ToString(InvariantCulture)));
            if (badgePrivacy.HasValue)
                requester.Params.Add(new ParamPair("badge", badgePrivacy.Value.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackVoidResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetStatus"/>
        /// </summary>
        public static void GetStatusAsync(AsyncCallback<StatusInfo> callback, long statusID)
        {
            ValidateArgument(statusID, "statusID");
            var requester = new OAuthHttpGet(string.Format("{0}/{1}.xml", APIUri.ShowStatus, statusID));
            requester.Params.Add(new ParamPair("id", statusID.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="PostStatus"/>
        /// </summary>
        public static void PostStatusAsync(AsyncCallback<StatusInfo> callback, UpdateStatusInfo updateStatusInfo)
        {
            // Validates arguments
            ValidateArgument(updateStatusInfo, "updateStatusInfo");
            ValidateArgument(updateStatusInfo.Status, "updateStatusInfo.Status");
            Collection<ParamPair> customParams = new Collection<ParamPair>();
            customParams.Add(new ParamPair("status", RFC3986Encoder.UrlEncode(updateStatusInfo.Status)));
            if (updateStatusInfo.ReplyTo.HasValue)
            {
                customParams.Add(new ParamPair("in_reply_to_status_id", updateStatusInfo.ReplyTo.Value.ToString()));
            }
            if (updateStatusInfo.Latitude.HasValue && updateStatusInfo.Longitude.HasValue)
            {
                customParams.Add(new ParamPair("lat", updateStatusInfo.Latitude.Value.ToString(InvariantCulture)));
                customParams.Add(new ParamPair("long", updateStatusInfo.Longitude.Value.ToString(InvariantCulture)));
            }
            // The status text must be url-encoded.
            var requester = new OAuthHttpPost(APIUri.UpdateStatus, customParams);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="PostStatusWithPic"/>
        /// </summary>
        public static void PostStatusWithPicAsync(AsyncCallback<StatusInfo> callback, UpdateStatusWithPicInfo updateStatusWithPicInfo)
        {
            // Validates arguments
            ValidateArgument(updateStatusWithPicInfo, "updateStatusWithPicInfo");
            ValidateArgument(updateStatusWithPicInfo.Status, "updateStatusWithPicInfo.Status");
            ValidateArgument(updateStatusWithPicInfo.Pic, "updateStatusWithPicInfo.Pic");
            FileInfo picInfo = new FileInfo(updateStatusWithPicInfo.Pic);
            if (picInfo.Length > 5 * 1021 * 1024) // 5MB limit
            {
                throw new AMicroblogException(LocalErrorCode.ArgumentInvalid, "Pic file too large to post.");
            }
            var uri = APIUri.UpdateStatusWithPic;
            var requester = new OAuthMultiPartHttpPost(uri);
            requester.PartFields.Add(new MultiPartField() { Name = "status", Value = RFC3986Encoder.UrlEncode(updateStatusWithPicInfo.Status) });
            requester.PartFields.Add(new MultiPartField() { Name = "pic", FilePath = updateStatusWithPicInfo.Pic });
            if (updateStatusWithPicInfo.Latitude.HasValue && updateStatusWithPicInfo.Longitude.HasValue)
            {
                requester.PartFields.Add(new MultiPartField() { Name = "lat", FilePath = updateStatusWithPicInfo.Latitude.Value.ToString(InvariantCulture) });
                requester.PartFields.Add(new MultiPartField() { Name = "long", FilePath = updateStatusWithPicInfo.Longitude.Value.ToString(InvariantCulture) });
            }
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="DeleteStatus"/>
        /// </summary>
        public static void DeleteStatusAsync(AsyncCallback<StatusInfo> callback, long statusID)
        {
            ValidateArgument(statusID, "statusID");
            var requester = new OAuthHttpDelete(string.Format("{0}/{1}.xml", APIUri.DeleteStatus, statusID));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="Forward"/>
        /// </summary>
        public static void ForwardAsync(AsyncCallback<StatusInfo> callback, long statusID, string repostStatusText, bool commentToAuthor = false, bool commentToOriginalAuthor = false)
        {
            ValidateArgument(statusID, "statusID");
            var requester = new OAuthHttpPost(APIUri.RepostStatus);
            requester.Params.Add(new ParamPair("id", statusID.ToString(InvariantCulture)));
            requester.Params.Add(new ParamPair("status", RFC3986Encoder.UrlEncode(repostStatusText)));
            var isComment = 0;
            if (commentToAuthor)
                isComment++;
            if (commentToOriginalAuthor)
                isComment++;
            requester.Params.Add(new ParamPair("is_comment", isComment.ToString()));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="Comment"/>
        /// </summary>
        public static void CommentAsync(AsyncCallback<CommentInfo> callback, long statusID, string comment, bool commentToOriginalAuthor = false)
        {
            ValidateArgument(statusID, "statusID");
            ValidateArgument(comment, "comment");            
            var requester = new OAuthHttpPost(APIUri.Comment);
            requester.Params.Add(new ParamPair("id", statusID.ToString(InvariantCulture)));
            requester.Params.Add(new ParamPair("comment", RFC3986Encoder.UrlEncode(comment)));            
            if (commentToOriginalAuthor)
                requester.Params.Add(new ParamPair("comment_ori", "1"));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetComments"/>
        /// </summary>
        public static void GetCommentsAsync(AsyncCallback<Comments> callback, long statusID,  int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetComments);
            requester.Params.Add("id", statusID.ToString(InvariantCulture));
            if (count.HasValue)
                requester.Params.Add("count", count.Value.ToString(InvariantCulture));
            if (page.HasValue)
                requester.Params.Add("page", page.Value.ToString(InvariantCulture));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="ReplyComment"/>
        /// </summary>
        public static void ReplyCommentAsync(AsyncCallback<CommentInfo> callback, long commentID, string comment, long statusID, bool withoutMention = false)
        {
            ValidateArgument(commentID, "commentID");
            ValidateArgument(comment, "comment");
            var requester = new OAuthHttpPost(APIUri.ReplyComment);
            requester.Params.Add(new ParamPair("cid", commentID.ToString(InvariantCulture)));
            requester.Params.Add(new ParamPair("comment", RFC3986Encoder.UrlEncode(comment)));
            requester.Params.Add(new ParamPair("id", statusID.ToString(InvariantCulture)));           
            if (withoutMention)
                requester.Params.Add(new ParamPair("without_mention", "1"));           
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="DeleteComment"/>
        /// </summary>
        public static void DeleteCommentAsync(AsyncCallback<CommentInfo> callback, long commentID)
        {
            ValidateArgument(commentID, "commentID");
            var requester = new OAuthHttpDelete(string.Format("{0}/{1}.xml", APIUri.DeleteComment, commentID));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="DeleteComments"/>
        /// </summary>
        public static void DeleteCommentsAsync(AsyncCallback<Comments> callback, long[] commentIDs)
        {
            ValidateArgument(commentIDs, "commentIDs");
            StringBuilder cidBuilder = new StringBuilder();
            foreach (var item in commentIDs)
            {
                cidBuilder.Append(item);
                cidBuilder.Append(",");
            }
            var requester = new OAuthHttpPost(APIUri.DeleteComments);
            requester.Params.Add(new ParamPair("ids", cidBuilder.ToString()));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetDirectMessages"/>
        /// </summary>
        public static void GetDirectMessagesAsync(AsyncCallback<DirectMessages> callback, long? sinceID = null, long? maxID = null, int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetDirectMessages);
         
            ConstructPagedRecordsParams(requester.Params, sinceID, maxID, page, count);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetSentDirectMessages"/>
        /// </summary>
        public static void GetSentDirectMessagesAsync(AsyncCallback<DirectMessages> callback, long? sinceID = null, long? maxID = null, int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetSentDirectMessages);
            ConstructPagedRecordsParams(requester.Params, sinceID, maxID, page, count);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="SendDirectMessage"/>
        /// </summary>
        public static void SendDirectMessageAsync(AsyncCallback<DirectMessageInfo> callback, long receiverID, string message)
        {
            ValidateArgument(message, "message");
            var requester = new OAuthHttpPost(APIUri.SendDirectMessage);
            requester.Params.Add("user_id", receiverID.ToString(InvariantCulture));
            requester.Params.Add("text", RFC3986Encoder.UrlEncode(message));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="SendDirectMessage"/>
        /// </summary>
        public static void SendDirectMessageAsync(AsyncCallback<DirectMessageInfo> callback, string receiverScreenName, string message)
        {
            ValidateArgument(receiverScreenName, "receiverScreenName");
            ValidateArgument(message, "message");
            var requester = new OAuthHttpPost(APIUri.SendDirectMessage);
            requester.Params.Add("screen_name", RFC3986Encoder.UrlEncode(receiverScreenName));
            requester.Params.Add("text", RFC3986Encoder.UrlEncode(message));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="DeleteDirectMessage"/>
        /// </summary>
        public static void DeleteDirectMessageAsync(AsyncCallback<DirectMessageInfo> callback, long directMessageID)
        {
            ValidateArgument(directMessageID, "directMessageID");
            var requester = new OAuthHttpDelete(string.Format("{0}/{1}.xml", APIUri.DeleteDirectMessage, directMessageID));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="DeleteDirectMessages"/>
        /// </summary>
        public static void DeleteDirectMessagesAsync(AsyncCallback<DirectMessages> callback, params long[] directMessageIDs)
        {
            ValidateArgument(directMessageIDs, "directMessageID");
            var count = directMessageIDs.Length;
            if (0 == count)
                throw new AMicroblogException(LocalErrorCode.ArgumentNotProvided, "Direct message IDs not provided.");
            var sBuilder = new StringBuilder();
            for (int i = 0; i < directMessageIDs.Length; i++)
            {
                sBuilder.Append(directMessageIDs[i]);
                if (i < count - 1)
                    sBuilder.Append(",");
            }
            var requester = new OAuthHttpDelete(APIUri.DeleteDirectMessages);
            requester.Params.Add("ids", sBuilder.ToString());
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetUserStatuses"/>
        /// </summary>
        public static void GetUserStatusesAsync(AsyncCallback<Statuses> callback, long? userID = null, long? sinceID = null, long? maxID = null, int? page = null, int? count = null,
            StatusType feature = StatusType.All, bool currentAppOnly = false)
        {
            var requester = new OAuthHttpGet(APIUri.UserTimeline);
            if(userID.HasValue)
                requester.Params.Add(new ParamPair("user_id", userID.Value.ToString(InvariantCulture)));
            
            ConstructPagedRecordsParams(requester.Params, sinceID, maxID, page, count);
            if (feature != StatusType.All)
                requester.Params.Add(new ParamPair("feature", ((int)feature).ToString(InvariantCulture)));
            if(currentAppOnly)
                requester.Params.Add(new ParamPair("base_app", "1"));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetPublicStatuses"/>
        /// </summary>
        public static void GetPublicStatusesAsync(AsyncCallback<Statuses> callback, int count = 20, bool currentAppOnly = false)
        {
            var requester = new HttpGet(APIUri.PublicTimeline);
            requester.Params.Add(Constants.Source, Environment.AppKey);            
            if (count != 20)
                requester.Params.Add(new ParamPair("count", count.ToString(InvariantCulture)));            
            if (currentAppOnly)
                requester.Params.Add(new ParamPair("base_app", "1"));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetFriendsStatuses"/>
        /// </summary>
        public static void GetFriendsStatusesAsync(AsyncCallback<Statuses> callback, long? sinceID = null, long? maxID = null, int? page = null, int? count = null,
            StatusType feature = StatusType.All, bool currentAppOnly = false)
        {
            var requester = new OAuthHttpGet(APIUri.FriendsTimeline);
            
            ConstructPagedRecordsParams(requester.Params, sinceID, maxID, page, count);
            
            if (feature != StatusType.All)
                requester.Params.Add(new ParamPair("feature", ((int)feature).ToString(InvariantCulture)));
            if (currentAppOnly)
                requester.Params.Add(new ParamPair("base_app", "1"));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetMentions"/>
        /// </summary>
        public static void GetMentionsAsync(AsyncCallback<Statuses> callback, long? sinceID = null, long? maxID = null, int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetMentions);
            ConstructPagedRecordsParams(requester.Params, sinceID, maxID, page, count);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetCommentsTimeline"/>
        /// </summary>
        public static void GetCommentsTimelineAsync(AsyncCallback<Comments> callback, long? sinceID = null, long? maxID = null, int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.CommentsTimeline);
            ConstructPagedRecordsParams(requester.Params, sinceID, maxID, page, count);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetCommentsByMe"/>
        /// </summary>
        public static void GetCommentsByMeAsync(AsyncCallback<Comments> callback, long? sinceID = null, long? maxID = null, int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.CommentsByMe);
            ConstructPagedRecordsParams(requester.Params, sinceID, maxID, page, count);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetCommentsToMe"/>
        /// </summary>
        public static void GetCommentsToMeAsync(AsyncCallback<Comments> callback, long? sinceID = null, long? maxID = null, int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.CommentsToMe);
            ConstructPagedRecordsParams(requester.Params, sinceID, maxID, page, count);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetCountersOfCommentNForward"/>
        /// </summary>
        public static void GetCountersOfCommentNForwardAsync(AsyncCallback<Counters> callback, long[] statusIDs)
        {
            ValidateArgument(statusIDs, "statusIDs");
            var requester = new OAuthHttpGet(APIUri.GetCountersOfCommentNForward);
            var statusIDsBuilder = new StringBuilder();
            for (int i = 0; i < statusIDs.Length; i++)
            {
                statusIDsBuilder.Append(statusIDs[i]);
                if (i < statusIDs.Length - 1)
                {
                    statusIDsBuilder.Append(",");
                }
            }
            requester.Params.Add(new ParamPair("ids", statusIDsBuilder.ToString()));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetUnreadInfo"/>
        /// </summary>
        public static void GetUnreadInfoAsync(AsyncCallback<UnreadInfo> callback, bool withNewStatus = false, long? sinceID = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetUnreadInfo);
            if (withNewStatus)
                requester.Params.Add(new ParamPair("with_new_status", "1"));
            if(sinceID.HasValue)
                requester.Params.Add(new ParamPair("since_id", sinceID.Value.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="ResetCounter"/>
        /// </summary>
        public static void ResetCounterAsync(VoidAsyncCallback callback, CounterType counterType)
        {
            var requester = new OAuthHttpGet(APIUri.ResetCounter);
            requester.Params.Add(new ParamPair("type", ((int)counterType).ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackVoidResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetUserInfo"/>
        /// </summary>
        public static void GetUserInfoAsync(AsyncCallback<UserInfo> callback, long userID)
        {
            var requester = new OAuthHttpGet(string.Format("{0}/{1}.xml",APIUri.GetUserInfo, userID));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetUserInfo"/>
        /// </summary>
        public static void GetUserInfoAsync(AsyncCallback<UserInfo> callback, string screenName)
        {
            ValidateArgument(screenName, "screenName");
            var requester = new OAuthHttpGet(string.Format("{0}.xml", APIUri.GetUserInfo));
            requester.Params.Add(new ParamPair("screen_name", RFC3986Encoder.UrlEncode(screenName)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetFriends"/>
        /// </summary>
        public static void GetFriendsAsync(AsyncCallback<Users> callback, long? userID = null, string screenName = null, int? cursor = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetFriends);
            if (userID.HasValue)
                requester.Params.Add(new ParamPair("user_id", userID.Value.ToString(InvariantCulture)));
            if (!string.IsNullOrEmpty(screenName))
                requester.Params.Add(new ParamPair("screen_Name", RFC3986Encoder.UrlEncode(screenName)));
            if (cursor.HasValue)
                requester.Params.Add(new ParamPair("cursor", cursor.Value.ToString(InvariantCulture)));
            if (count.HasValue)
                requester.Params.Add(new ParamPair("count", count.Value.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetFollowers"/>
        /// </summary>
        public static void GetFollowersAsync(AsyncCallback<Users> callback, long? userID = null, string screenName = null, int? cursor = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetFollowers);
            if (userID.HasValue)
                requester.Params.Add(new ParamPair("user_id", userID.Value.ToString(InvariantCulture)));
            if (!string.IsNullOrEmpty(screenName))
                requester.Params.Add(new ParamPair("screen_Name", RFC3986Encoder.UrlEncode(screenName)));
            if (cursor.HasValue)
                requester.Params.Add(new ParamPair("cursor", cursor.Value.ToString(InvariantCulture)));
            if (count.HasValue)
                requester.Params.Add(new ParamPair("count", count.Value.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetHotUsers"/>
        /// </summary>
        public static void GetHotUsersAsync(AsyncCallback<Users> callback, string category = "")
        {
            var requester = new OAuthHttpGet(APIUri.GetHotUsers);
            if (!string.IsNullOrEmpty(category))
                requester.Params.Add(new ParamPair("category", category));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="UpdateFriendRemark"/>
        /// </summary>
        public static void UpdateFriendRemarkAsync(AsyncCallback<Users> callback, long friendUserID, string remark)
        {
            var requester = new OAuthHttpPost(APIUri.UpdateRemark);
            requester.Params.Add(new ParamPair("user_id", friendUserID.ToString(InvariantCulture)));
            requester.Params.Add(new ParamPair("remark", RFC3986Encoder.UrlEncode(remark)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetSuggestedUsers"/>
        /// </summary>
        public static void GetSuggestedUsersAsync(AsyncCallback<Users> callback)
        {
            var requester = new OAuthHttpGet(APIUri.GetSuggestedUsers);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetUserSearchSuggestions"/>
        /// </summary>
        public static void GetUserSearchSuggestionsAsync(AsyncCallback<UserSuggestions> callback, string keyword, int type = 0, int? count = null, int? range = null)
        {
            ValidateArgument("keyword", keyword);
            var requester = new OAuthHttpGet(APIUri.GetUserSearchSuggestions);
            requester.Params.Add("q", RFC3986Encoder.UrlEncode(keyword));
            if (count.HasValue)
                requester.Params.Add("count", count.Value.ToString(InvariantCulture));
            requester.Params.Add("type", type.ToString(InvariantCulture));
            if (range.HasValue)
                requester.Params.Add("range", range.Value.ToString(InvariantCulture));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="Follow"/>
        /// </summary>
        public static void FollowAsync(AsyncCallback<UserInfo> callback, long? targetUserID = null, string targetUserScreenName = null)
        {
            var requester = new OAuthHttpPost(APIUri.CreateFriendship);
            if(targetUserID.HasValue)
                requester.Params.Add(new ParamPair("user_id", targetUserID.Value.ToString(InvariantCulture)));
            if (!string.IsNullOrEmpty(targetUserScreenName))
                requester.Params.Add(new ParamPair("screen_name", targetUserScreenName));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="Unfollow"/>
        /// </summary>
        public static void UnfollowAsync(AsyncCallback<UserInfo> callback, long? targetUserID = null, string targetUserScreenName = null)
        {
            var requester = new OAuthHttpPost(APIUri.DeleteFriendship);
            if (targetUserID.HasValue)
                requester.Params.Add(new ParamPair("user_id", targetUserID.Value.ToString(InvariantCulture)));
            if (!string.IsNullOrEmpty(targetUserScreenName))
                requester.Params.Add(new ParamPair("screen_name", targetUserScreenName));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="ExistsFriendship"/>
        /// </summary>
        public static void ExistsFriendshipAsync(AsyncCallback<ExistsFriendshipResultInfo> callback, long userAID, long userBID)
        {
            var requester = new OAuthHttpGet(APIUri.ExistsFriendship);
            requester.Params.Add(new ParamPair("user_a", userAID.ToString(InvariantCulture)));
            requester.Params.Add(new ParamPair("user_b", userBID.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetFriendshipInfo"/>
        /// </summary>
        public static void GetFriendshipInfoAsync(AsyncCallback<RelationshipInfo> callback, long targetUserID, long? sourceUserID = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetFriendshipInfo);
            if(sourceUserID.HasValue)
                requester.Params.Add(new ParamPair("source_id", sourceUserID.Value.ToString(InvariantCulture)));
            requester.Params.Add(new ParamPair("target_id", targetUserID.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetFollowingUserIDs"/>
        /// </summary>
        public static void GetFollowingUserIDsAsync(AsyncCallback<UserIDs> callback, long? userID = null, int? cursor = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetFollowingUserIDs);
            if (userID.HasValue)
                requester.Params.Add(new ParamPair("user_id", userID.Value.ToString(InvariantCulture)));
            if (cursor.HasValue)
                requester.Params.Add(new ParamPair("cursor", cursor.Value.ToString(InvariantCulture)));
            if (count.HasValue)
                requester.Params.Add(new ParamPair("count", count.Value.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetFollowerUserIDs"/>
        /// </summary>
        public static void GetFollowerUserIDsAsync(AsyncCallback<UserIDs> callback, long? userID = null, string screenName = null, int? cursor = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetFollowerUserIDs);
            if (userID.HasValue)
                requester.Params.Add(new ParamPair("user_id", userID.Value.ToString(InvariantCulture)));
            if(!string.IsNullOrEmpty(screenName))
                requester.Params.Add(new ParamPair("screen_name", RFC3986Encoder.UrlEncode(screenName)));
            if (cursor.HasValue)
                requester.Params.Add(new ParamPair("cursor", cursor.Value.ToString(InvariantCulture)));
            if (count.HasValue)
                requester.Params.Add(new ParamPair("count", count.Value.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetTags"/>
        /// </summary>
        public static void GetTagsAsync(AsyncCallback<Tags> callback, long userID, int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetTags);
            requester.Params.Add("user_id", userID.ToString(InvariantCulture));
            if (page.HasValue)
                requester.Params.Add(new ParamPair("page", page.Value.ToString(InvariantCulture)));
            if (count.HasValue)
                requester.Params.Add(new ParamPair("count", count.Value.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetSuggestedTags"/>
        /// </summary>
        public static void GetSuggestedTagsAsync(AsyncCallback<Tags> callback, int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetSuggestedTags);
            if (page.HasValue)
                requester.Params.Add(new ParamPair("page", page.Value.ToString(InvariantCulture)));
            if (count.HasValue)
                requester.Params.Add(new ParamPair("count", count.Value.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="CreateTags"/>
        /// </summary>
        public static void CreateTagsAsync(AsyncCallback<TagIDs> callback, params string[] tags)
        {
            ValidateArgument(tags, "tags");
            var count = tags.Length;
            if (count == 0)
                throw new AMicroblogException(LocalErrorCode.ArgumentNotProvided, "Tags not provided.");
            var tagBuilder = new StringBuilder();
            for (int i = 0; i < tags.Length; i++)
            {
                tagBuilder.Append(tags[i]);
                if( i < count -1)
                    tagBuilder.Append(",");
            }
            var requester = new OAuthHttpPost(APIUri.CreateTags);
            requester.Params.Add("tags", tagBuilder.ToString());
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="DeleteTag"/>
        /// </summary>
        public static void DeleteTagAsync(VoidAsyncCallback callback, long tagID)
        {
            var requester = new OAuthHttpDelete(APIUri.DeleteTag);
            requester.Params.Add("tag_id", tagID.ToString(InvariantCulture));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackVoidResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetFavorites"/>
        /// </summary>
        public static void GetFavoritesAsync(AsyncCallback<Statuses> callback, int? page = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetFavorites);
            if (page.HasValue)
                requester.Params.Add(new ParamPair("page", page.Value.ToString(InvariantCulture)));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="AddToFavorite"/>
        /// </summary>
        public static void AddToFavoriteAsync(AsyncCallback<StatusInfo> callback, long statusID)
        {
            var requester = new OAuthHttpPost(APIUri.AddToFavorite);
            requester.Params.Add("id", statusID.ToString(InvariantCulture));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="DeleteFromFavorite"/>
        /// </summary>
        public static void DeleteFromFavoriteAsync(AsyncCallback<StatusInfo> callback, long statusID)
        {
            var requester = new OAuthHttpDelete(string.Format("{0}/{1}.xml", APIUri.DeleteFromFavorite, statusID));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="DeleteMultipleFromFavorite"/>
        /// </summary>
        public static void DeleteMultipleFromFavoriteAsync(AsyncCallback<Statuses> callback, params long[] statusIDs)
        {
            ValidateArgument(statusIDs, "statusIDs");
            var count = statusIDs.Length;
            if (count == 0)
                throw new AMicroblogException(LocalErrorCode.ArgumentNotProvided, "Status IDs not provided.");
            var tagBuilder = new StringBuilder();
            for (int i = 0; i < statusIDs.Length; i++)
            {
                tagBuilder.Append(statusIDs[i]);
                if (i < count - 1)
                    tagBuilder.Append(",");
            }
            var requester = new OAuthHttpDelete(APIUri.DeleteMultipleFromFavorite);
            requester.Params.Add("ids", tagBuilder.ToString());
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetBlockingList"/>
        /// </summary>
        public static void GetBlockingListAsync(AsyncCallback<Users> callback, int? page = null, int? count = null)
        {
            var requester = new OAuthHttpGet(APIUri.GetBlockingList);
            if (page.HasValue)
                requester.Params.Add("page", page.Value.ToString(InvariantCulture));
            if (count.HasValue)
                requester.Params.Add("count", count.Value.ToString(InvariantCulture));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="Block"/>
        /// </summary>
        public static void BlockAsync(AsyncCallback<UserInfo> callback, long? userID = null, string screenName = null)
        {
            var requester = new OAuthHttpPost(APIUri.Block);
            if (userID.HasValue)
                requester.Params.Add("user_id", userID.Value.ToString(InvariantCulture));
            if (!string.IsNullOrEmpty(screenName))
                requester.Params.Add("screen_name", RFC3986Encoder.UrlEncode(screenName));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="Unblock"/>
        /// </summary>
        public static void UnblockAsync(AsyncCallback<UserInfo> callback, long? userID = null, string screenName = null)
        {
            var requester = new OAuthHttpDelete(APIUri.Unblock);
            if (userID.HasValue)
                requester.Params.Add("user_id", userID.Value.ToString(InvariantCulture));
            if (!string.IsNullOrEmpty(screenName))
                requester.Params.Add("screen_name", RFC3986Encoder.UrlEncode(screenName));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetHourTrends"/>
        /// </summary>
        public static void GetHourTrendsAsync(AsyncCallback<PeriodTrends> callback, bool basedOnCurrentApp = false)
        {
            var requester = new OAuthHttpGet(APIUri.GetHourTrends);
            if (basedOnCurrentApp)
                requester.Params.Add("base_app", "1");
            else
                requester.Params.Add("base_app", "0");
            
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetDayTrends"/>
        /// </summary>
        public static void GetDayTrendsAsync(AsyncCallback<PeriodTrends> callback, bool basedOnCurrentApp = false)
        {
            var requester = new OAuthHttpGet(APIUri.GetDayTrends);
            if (basedOnCurrentApp)
                requester.Params.Add("base_app", "1");
            else
                requester.Params.Add("base_app", "0");
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetWeekTrends"/>
        /// </summary>
        public static void GetWeekTrendsAsync(AsyncCallback<PeriodTrends> callback, bool basedOnCurrentApp = false)
        {
            var requester = new OAuthHttpGet(APIUri.GetWeekTrends);
            if (basedOnCurrentApp)
                requester.Params.Add("base_app", "1");
            else
                requester.Params.Add("base_app", "0");
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetTrendStatuses"/>
        /// </summary>
        public static void GetTrendStatusesAsync(AsyncCallback<Statuses> callback, string trendName)
        {
            ValidateArgument(trendName, "trendName");
            var requester = new OAuthHttpGet(APIUri.GetTrendStatuses);
            requester.Params.Add("trend_name", RFC3986Encoder.UrlEncode(trendName));
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="ConvertToShortUrls"/>
        /// </summary>
        public static void ConvertToShortUrlsAsync(AsyncCallback<Urls> callback, params string[] longUrls)
        {
            ValidateArgument(longUrls, "longUrls");
            var count = longUrls.Length;
            if (count == 0)
                throw new AMicroblogException(LocalErrorCode.ArgumentNotProvided, "Long urls not provided.");
            var requester = new HttpGet(APIUri.ConvertToShortUrls);
            requester.Params.Add(Constants.Source, Environment.AppKey);            
            foreach (var longUrl in longUrls)
            {
                requester.Params.Add("url_long", longUrl);
            }
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="ConvertToLongUrls"/>
        /// </summary>
        public static void ConvertToLongUrlsAsync(AsyncCallback<Urls> callback, params string[] shortUrls)
        {
            ValidateArgument(shortUrls, "shortUrls");
            var count = shortUrls.Length;
            if (count == 0)
                throw new AMicroblogException(LocalErrorCode.ArgumentNotProvided, "Short urls not provided.");
            var requester = new HttpGet(APIUri.ConvertToLongUrls);
            requester.Params.Add(Constants.Source, Environment.AppKey);            
            foreach (var longUrl in shortUrls)
            {
                requester.Params.Add("url_short", longUrl);
            }
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetShortUrlSharedCount"/>
        /// </summary>
        public static void GetShortUrlSharedCountAsync(AsyncCallback<Urls> callback, string shortUrl)
        {
            ValidateArgument(shortUrl, "shortUrl");
            var requester = new HttpGet(APIUri.GetShortUrlSharedCount);
            requester.Params.Add(Constants.Source, Environment.AppKey);
            requester.Params.Add("url_short", shortUrl);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        /// <summary>
        /// The async implementation of <see cref="GetShortUrlCommentCount"/>
        /// </summary>
        public static void GetShortUrlCommentCountAsync(AsyncCallback<Urls> callback, string shortUrl)
        {
            ValidateArgument(shortUrl, "shortUrl");
            var requester = new HttpGet(APIUri.GetShortUrlCommentCount);
            requester.Params.Add(Constants.Source, Environment.AppKey);
            requester.Params.Add("url_short", shortUrl);
            requester.RequestAsync(delegate(AsyncCallResult<string> result)
            {
                ProcessAsyncCallbackResponse(result, callback);
            });
        }

        #endregion
    }
}
